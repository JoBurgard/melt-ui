{
  "tree": {
    "props": {
      "forceVisible": {
        "type": "boolean",
        "description": "If `true`, hidden elements will be visible.",
        "defaultValue": "false"
      },
      "defaultExpanded": {
        "type": "string[]",
        "description": "Which tree items are expanded by default.",
        "defaultValue": "false"
      },
      "expanded": {
        "type": "Writable<string[]>",
        "description": "Optionally pass a writable store to control the expanded items of the tree.\nIf provided, this will override the value of the `defaultTree` prop."
      },
      "onExpandedChange": {
        "type": "ChangeFn<string[]>",
        "description": "A callback called when the value of the `expanded` store should be changed."
      }
    }
  },
  "tooltip": {
    "props": {
      "group": {
        "type": "string | boolean",
        "description": "If set to `true`, whenever you open this tooltip, all other tooltips\nwith `group` also set to `true` will close. If you pass in a string\ninstead, only tooltips with the same `group` value will be closed."
      },
      "portal": {
        "type": "string | HTMLElement",
        "description": "If not undefined, the tooltip will be rendered within the provided element or selector.",
        "defaultValue": "'body'"
      },
      "ids": {
        "type": "IdObj<readonly [\"trigger\", \"content\"]>",
        "description": "Optionally override the default ids we assign to the elements"
      }
    }
  },
  "toolbar": {
    "props": {}
  },
  "toggle-group": {
    "props": {}
  },
  "toggle": {
    "props": {}
  },
  "toast": {
    "props": {}
  },
  "tags-input": {
    "props": {
      "add": {
        "type": "AddTag",
        "description": "Optional validator/parser function that runs on tag addition.\n\nIf an error is thrown, or the promise is rejected, the tag will not be added.\n\nOtherwise, return a Tag or a string for the tag to be added."
      },
      "remove": {
        "type": "RemoveTag",
        "description": "Optional validator/parser function that runs on tag removal.\n\nIf an error is thrown, the promise is rejected, or `false` is returned, the tag will not be removed.\n\nOtherwise, return `true` for the tag to be removed."
      },
      "update": {
        "type": "UpdateTag",
        "description": "Optional validator/parser function that runs on tag update.\n\nIf an error is thrown, or the promise is rejected, the tag will not be updated.\n\nOtherwise, return a Tag or a string for the tag to be updated."
      }
    }
  },
  "tabs": {
    "props": {
      "defaultValue": {
        "type": "string",
        "description": "The uncontrolled default value of the tabs."
      },
      "value": {
        "type": "Writable<string>",
        "description": "The controlled value store for the tabs.\nIf provided, this will override the value passed to `defaultValue`."
      },
      "onValueChange": {
        "type": "ChangeFn<string>",
        "description": "The callback invoked when the value store of the tabs changes."
      },
      "orientation": {
        "type": "Orientation",
        "description": "The orientation of the tabs.",
        "defaultValue": "'horizontal'"
      },
      "activateOnFocus": {
        "type": "boolean",
        "description": "Whether or not the tabs should activate when the trigger is focused.",
        "defaultValue": "true"
      },
      "loop": {
        "type": "boolean",
        "description": "Whether or not the tabs should loop around when the end is reached."
      },
      "autoSet": {
        "type": "boolean",
        "description": "In case no value is set on initialization, sets the value to the first tab"
      }
    }
  },
  "table-of-contents": {
    "props": {}
  },
  "switch": {
    "props": {
      "defaultChecked": {
        "type": "boolean",
        "description": "The uncontrolled default checked status of the switch.",
        "defaultValue": "false"
      },
      "checked": {
        "type": "Writable<boolean>",
        "description": "The controlled checked state of the switch.\nIf provided, this will override the value passed to `defaultChecked`."
      },
      "onCheckedChange": {
        "type": "ChangeFn<boolean>",
        "description": "The callback invoked when the checked state of the switch changes."
      },
      "disabled": {
        "type": "boolean",
        "description": "When `true`, prevents the user from interacting with the switch.",
        "defaultValue": "false"
      },
      "required": {
        "type": "boolean",
        "description": "When `true`, indicates that the user must check the switch before the owning form can be submitted.",
        "defaultValue": "false"
      },
      "name": {
        "type": "string",
        "description": "The name of the switch. Submitted with its owning form as part of a name/value pair.",
        "defaultValue": "undefined"
      },
      "value": {
        "type": "string",
        "description": "The value given as data when submitted with a `name`.",
        "defaultValue": "undefined"
      }
    }
  },
  "slider": {
    "props": {
      "defaultValue": {
        "type": "number[]",
        "description": "The uncontrolled default value of the slider.",
        "defaultValue": "[]"
      },
      "value": {
        "type": "Writable<number[]>",
        "description": "The controlled value store for the switch.\nIf provided, this will override the value passed to `defaultValue`."
      },
      "onValueChange": {
        "type": "ChangeFn<number[]>",
        "description": "The callback invoked when the value store of the slider changes."
      },
      "min": {
        "type": "number",
        "description": "The minimum value of the slider.",
        "defaultValue": "0"
      },
      "max": {
        "type": "number",
        "description": "The maximum value of the slider.",
        "defaultValue": "100"
      },
      "step": {
        "type": "number",
        "description": "The amount to increment or decrement the value of the slider.",
        "defaultValue": "1"
      },
      "orientation": {
        "type": "SliderOrientation",
        "description": "The orientation of the slider.",
        "defaultValue": "'horizontal'"
      },
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The direction of the slider.\n\nFor vertical sliders, setting `dir` to `rtl`\nwill cause the slider to be start from the top.",
        "defaultValue": "'ltr'"
      },
      "disabled": {
        "type": "boolean",
        "description": "When `true`, prevents the user from interacting with the slider.",
        "defaultValue": "false"
      }
    }
  },
  "separator": {
    "props": {}
  },
  "select": {
    "props": {}
  },
  "range-calendar": {
    "props": {
      "preventDeselect": {
        "type": "boolean",
        "description": "Prevent deselecting the selected date(s), which would set the\nvalue to `undefined`. You can use this to ensure a date\nis always selected in certain situations.",
        "defaultValue": "false"
      },
      "minValue": {
        "type": "DateValue",
        "description": "The minimum selectable date. When provided, the\ncalendar will not shift to a month before this date,\nand all dates before this date will be disabled.",
        "defaultValue": "undefined"
      },
      "maxValue": {
        "type": "DateValue",
        "description": "The maximum selectable date. When provided, the\ncalendar will not shift to a month after this date,\nand all dates before this date will be disabled.",
        "defaultValue": "undefined"
      },
      "defaultValue": {
        "type": "DateRange",
        "description": "The default value for the date field. When provided,\nthe `placeholder` will also assume this value.",
        "defaultValue": "undefined;"
      },
      "onValueChange": {
        "type": "ChangeFn<DateRange>",
        "description": "A function called when the value of the date field changes.\nIt receives a single argument, which is an object containing\n`curr` and `prev` properties, whose values are the current\nand previous values of the value store. Whatever you return\nfrom this function will be set as the new value of the value\nstore.",
        "defaultValue": "undefined"
      },
      "value": {
        "type": "Writable<DateRange>",
        "description": "A writable store than can be used to control the value of the\ndate picker from outside the builder. This is useful if you\nwant to sync the value of the date field with another store\nused in your app.",
        "defaultValue": "undefined;"
      },
      "defaultPlaceholder": {
        "type": "DateValue",
        "description": "The date that is used to display the initial month and\nyear of the calendar. When a `defaultValue` or `value`\nprop containing a date is provided, this prop is ignored.\n\nIt is useful when you want to display a specific month\nand year when the calendar is first opened, but you don't\nnecessarily want to set the value of the date picker to\nthat date.",
        "defaultValue": "CalendarDate - the current date at midnight."
      },
      "placeholder": {
        "type": "DateValue>",
        "description": "A writable store that can be used to control the placeholder\ndate from outside the builder. When this prop is provided,\nthe `defaultPlaceholder` prop is ignored, and the value\nof this store is used instead.\n\nThe `placeholder` store is not used to set the value of the\ndate picker, it is only used to control the starting point for\nthe calendar. The `placeholder` store is used to determine\nwhere the calendar should start when it is first opened without\na value, as well as the starting point for cycling through the\nindividual date segments.\n\nWhen the date picker is first opened, if the `value` of the\ndate picker is set, the `placeholder` will be set\nto the same value as the `value` store. If the `value` store is\nnot set, the `placeholder` will initially be set to the same\nvalue as the `defaultPlaceholder` prop.",
        "defaultValue": "Writable<CalendarDate> - the current date at midnight."
      },
      "onPlaceholderChange": {
        "type": "ChangeFn<DateValue>",
        "description": "A function called when the placeholder value changes. It receives\na single argument, which is an object containing `curr` and\n`prev` properties, whose values are the current and previous\nvalues of the `placeholder` store. Whatever you return from this\nfunction will be set as the new value of the `placeholder` store.\n\nThe `placeholder` is kept in sync with the `value` store, so\nensure you know what you're doing if you intend on overriding the\nvalue, as it may render the date picker unusable.",
        "defaultValue": "undefined"
      },
      "pagedNavigation": {
        "type": "boolean",
        "description": "Only applicable when `numberOfMonths` is greater than 1.\n\nWhether or not to use paged navigation for the next and previous\nbuttons in the date picker. Paged navigation will change all months\nin the view when the next/prev buttons are clicked. Non-paged navigation\njust shifts by a single month.\n\nFor example, with `pagedNavigation` set to `true`, if you have 2 months\ndisplayed, January and February, and you click the next button, the months\nin view will change to March and April. If `pagedNavigation` is `false`,\nthe months in view will change to February and March.",
        "defaultValue": "false"
      },
      "weekStartsOn": {
        "type": "0 | 1 | 2 | 3 | 4 | 5 | 6",
        "description": "The day of the week to start the calendar on, which must\nbe a number between 0 and 6, where 0 is Sunday and 6 is\nSaturday.",
        "defaultValue": "0 (Sunday)"
      },
      "weekdayFormat": {
        "type": "\"long\" | \"short\" | \"narrow\"",
        "description": "How the string representation of the weekdays provided via the `weekdays` state\nstore should be formatted.\n\n```md\n- \"long\": \"Sunday\", \"Monday\", \"Tuesday\", etc.\n- \"short\": \"Sun\", \"Mon\", \"Tue\", etc.\n- \"narrow\": \"S\", \"M\", \"T\", etc.\n```",
        "defaultValue": "\"narrow\""
      },
      "isDateDisabled": {
        "type": "Matcher",
        "description": "Any dates that match the provided matchers will\nbe marked as disabled, which means they cannot be\nfocused or selected. They will also include a data\nattribute that can be used to style them differently\nthan the other dates.",
        "defaultValue": "undefined;"
      },
      "isDateUnavailable": {
        "type": "Matcher",
        "description": "Any dates that match the provided matchers will be\nmarked as unavailable, which is different from disabled,\nas unavailable dates can still be focused and selected,\nbut will cause the date picker to be marked as invalid if\nselected.\n\nFor example, if you are displaying a calendar for booking\nappointments, you may want to mark dates that are already\nbookes as unavailable, but may become available again before\nthe appointment date, so the user can still select them to\nlearn more about the appointment.",
        "defaultValue": "undefined;"
      },
      "fixedWeeks": {
        "type": "boolean",
        "description": "Display 6 weeks per month, regardless the month's number of weeks.\nThis is useful for displaying a consistent calendar, where the size\nof the calendar doesn't change month to month.\n\nTo display 6 weeks per month, you will need to render out the previous\nand next month's dates in the calendar as well.",
        "defaultValue": "false"
      },
      "numberOfMonths": {
        "type": "number",
        "description": "The number of months to display on the calendar at once. To control\nhow the months are navigated between, see the `pagedNavigation` prop.",
        "defaultValue": "1"
      },
      "calendarLabel": {
        "type": "string",
        "description": "The label for the calendar, which is used for\naccessibility purposes only and is not visible on the page,\nit is read by screen readers when the calendar is opened.\n\nWe take the label you provide and append the current month and year\nto it, so you don't need to include that in the label."
      },
      "disabled": {
        "type": "boolean",
        "description": "Whether the calendar is disabled. When true, the user will not\nbe able to focus or select dates.",
        "defaultValue": "false"
      },
      "readonly": {
        "type": "boolean",
        "description": "Whether the calendar is readonly. When true, the user will be able\nto focus and navigate the calendar, but will not be able to select\ndates.",
        "defaultValue": "false"
      },
      "ids": {
        "type": "IdObj<readonly [\"calendar\", \"accessibleHeading\"]>",
        "description": "Override any of the element IDs set by the builder.\n\nNOTE: you should only use this prop if you know what\nyou're doing, as it could break the out-of-the-box\naccessibility and functionality of the date field if\nimplemented incorrectly."
      }
    }
  },
  "radio-group": {
    "props": {
      "disabled": {
        "type": "boolean",
        "description": "When `true`, prevents the user from interacting with the radio group.",
        "defaultValue": "false"
      },
      "required": {
        "type": "boolean",
        "description": "When `true`, indicates that the user must select a radio button before\nthe owning form can be submitted.",
        "defaultValue": "false"
      },
      "loop": {
        "type": "boolean",
        "description": "Whether or not the radio group should loop around when the end\nis reached.",
        "defaultValue": "false"
      },
      "orientation": {
        "type": "Orientation",
        "description": "The orientation of the radio group.",
        "defaultValue": "'horizontal'"
      },
      "defaultValue": {
        "type": "string",
        "description": "The uncontrolled default value of the radio group.",
        "defaultValue": "undefined"
      },
      "value": {
        "type": "Writable<string>",
        "description": "The controlled value store for the radio group.\nIf provided, this will override the value passed to `defaultValue`."
      },
      "onValueChange": {
        "type": "ChangeFn<string>",
        "description": "The callback invoked when the value store of the radio group changes."
      }
    }
  },
  "progress": {
    "props": {
      "defaultValue": {
        "type": "number",
        "description": "The uncontrolled default value of the progress.",
        "defaultValue": "0"
      },
      "value": {
        "type": "Writable<number>",
        "description": "The controlled value store for the radio group.\nIf provided, this will override the value passed to `defaultValue`."
      },
      "onValueChange": {
        "type": "ChangeFn<number>",
        "description": "The callback invoked when the value store of the progress changes."
      },
      "max": {
        "type": "number",
        "description": "The maximum value of the progress.",
        "defaultValue": "100"
      }
    }
  },
  "popover": {
    "props": {
      "positioning": {
        "type": "FloatingConfig",
        "description": "The positioning configuration for the floating element."
      },
      "arrowSize": {
        "type": "number",
        "description": "The size of the optional arrow in pixels."
      },
      "defaultOpen": {
        "type": "boolean",
        "description": "The initial state of the `open` store.\nShould only be used if the popover is uncontrolled."
      },
      "open": {
        "type": "Writable<boolean>",
        "description": "A store that controls the open state.\nUse when you want to directly control the popover."
      },
      "onOpenChange": {
        "type": "ChangeFn<boolean>",
        "description": "Optional function that runs whenever open should change.\nWhen present, will control state changes instead of the\ndefault behaviour."
      },
      "disableFocusTrap": {
        "type": "boolean",
        "description": "Whether or not to disable the focus trap when the popover is open.",
        "defaultValue": "false"
      },
      "closeOnEscape": {
        "type": "boolean",
        "description": "Whether or not to close the popover when the escape key is pressed.",
        "defaultValue": "true"
      },
      "closeOnOutsideClick": {
        "type": "boolean",
        "description": "Whether or not to close the popover when the escape key is pressed.",
        "defaultValue": "true"
      },
      "onOutsideClick": {
        "type": "(event: PointerEvent) => void",
        "description": "A custom event handler for the \"outside click\" event, which\nis handled by the `document`.\nIf `event.preventDefault()` is called within the function,\nthe dialog will not close when the user clicks outside of it."
      },
      "preventScroll": {
        "type": "boolean",
        "description": "Whether or not to prevent scrolling when the popover is open.",
        "defaultValue": "false"
      },
      "portal": {
        "type": "string | HTMLElement",
        "description": "If not undefined, the popover will be rendered within the provided element or selector.",
        "defaultValue": "'body'"
      },
      "forceVisible": {
        "type": "boolean",
        "description": "Whether the menu content should be displayed even if it is not open.\nThis is useful for animating the content in and out using transitions.",
        "defaultValue": "false"
      },
      "openFocus": {
        "type": "FocusProp",
        "description": "Override the default autofocus behavior of the popover\non open."
      },
      "closeFocus": {
        "type": "FocusProp",
        "description": "Override the default autofocus behavior of the popover\non close."
      },
      "ids": {
        "type": "IdObj<readonly [\"trigger\", \"content\"]>",
        "description": "Optionally override the default ids we assign to the elements"
      }
    }
  },
  "pin-input": {
    "props": {
      "placeholder": {
        "type": "string",
        "description": "An optional placeholder to display when the input is empty.",
        "defaultValue": "'○'"
      },
      "name": {
        "type": "string",
        "description": "The name of the input. Submitted with its owning form as part\nof a name/value pair.",
        "defaultValue": "undefined"
      },
      "disabled": {
        "type": "boolean",
        "description": "If `true`, prevents the user from interacting with the input.",
        "defaultValue": "false"
      },
      "type": {
        "type": "\"text\" | \"password\"",
        "description": "The type of the input. Use `password` to mask the input.",
        "defaultValue": "'text'"
      },
      "defaultValue": {
        "type": "string[]",
        "description": "The uncontrolled default value of the pin input.",
        "defaultValue": "[]"
      },
      "value": {
        "type": "Writable<string[]>",
        "description": "The controlled value store for the pin input.\nIf provided, this will override the value passed to `defaultValue`."
      },
      "onValueChange": {
        "type": "ChangeFn<string[]>",
        "description": "The callback invoked when the value store of the pin input changes."
      },
      "ids": {
        "type": "IdObj<readonly [\"root\"]>",
        "description": "Optionally override the default ids we assign to the elements"
      }
    }
  },
  "pagination": {
    "props": {
      "count": {
        "type": "number",
        "description": "The total number of items to be paginated."
      },
      "perPage": {
        "type": "number",
        "description": "Number of items per page",
        "defaultValue": "1"
      },
      "siblingCount": {
        "type": "number",
        "description": "Number of visible items before and after the current page",
        "defaultValue": "1"
      },
      "defaultPage": {
        "type": "number",
        "description": "The uncontrolled default page of the pagination.",
        "defaultValue": "1"
      },
      "page": {
        "type": "Writable<number>",
        "description": "The controlled page store for the pagination.\nIf provided, this will override the value passed to `defaultPage`."
      },
      "onPageChange": {
        "type": "ChangeFn<number>",
        "description": "The callback invoked when the value of the page store changes."
      }
    }
  },
  "menubar": {
    "props": {
      "loop": {
        "type": "boolean",
        "description": "Whether or not the menubar should loop when\nnavigating with the arrow keys.",
        "defaultValue": "true"
      },
      "closeOnEscape": {
        "type": "boolean",
        "description": "Whether to close the active menu when the escape key is pressed.",
        "defaultValue": "true"
      },
      "preventScroll": {
        "type": "boolean",
        "description": "Whether to prevent scrolling the body when any menu within\nthe menubar is open.",
        "defaultValue": "true"
      },
      "ids": {
        "type": "IdObj<readonly [\"menubar\"]>",
        "description": "Optionally override the default ids we assign to the elements"
      }
    }
  },
  "menu": {
    "props": {
      "positioning": {
        "type": "FloatingConfig",
        "description": "Options for positioning the popover menu.",
        "defaultValue": "placement: 'bottom'"
      },
      "arrowSize": {
        "type": "number",
        "description": "The size of the arrow in pixels.",
        "defaultValue": "8"
      },
      "dir": {
        "type": "TextDirection",
        "description": "The direction of the text in the dropdown menu",
        "defaultValue": "'ltr'"
      },
      "preventScroll": {
        "type": "boolean",
        "description": "Whether or not to prevent scrolling when the menu is open.",
        "defaultValue": "true"
      },
      "closeOnEscape": {
        "type": "boolean",
        "description": "Whether or not to close the menu when the escape key is pressed.",
        "defaultValue": "true"
      },
      "closeOnItemClick": {
        "type": "boolean",
        "description": "Whether or not to close the menu when an internal item is clicked.",
        "defaultValue": "true"
      },
      "portal": {
        "type": "string | HTMLElement",
        "description": "If not `undefined`, the menu will be rendered within the provided element or selector.",
        "defaultValue": "'body'"
      },
      "closeOnOutsideClick": {
        "type": "boolean",
        "description": "Whether or not to close the menu when a click occurs outside of it.",
        "defaultValue": "true"
      },
      "onOutsideClick": {
        "type": "(event: PointerEvent) => void",
        "description": "A custom event handler for the \"outside click\" event, which\nis handled by the `document`.\nIf `event.preventDefault()` is called within the function,\nthe dialog will not close when the user clicks outside of it."
      },
      "loop": {
        "type": "boolean",
        "description": "Whether or not to loop the menu navigation.",
        "defaultValue": "false"
      },
      "defaultOpen": {
        "type": "boolean",
        "description": "Whether the menu is open by default or not.\n\nThis option is ignore if you also pass an `open` store prop.",
        "defaultValue": "false"
      },
      "open": {
        "type": "Writable<boolean>",
        "description": "A controlled open state store for the menu. If provided, the\nvalue of this store will override the `defaultOpen` prop."
      },
      "onOpenChange": {
        "type": "ChangeFn<boolean>",
        "description": "A callback for when the open state changes."
      },
      "forceVisible": {
        "type": "boolean",
        "description": "Whether the menu content should be displayed even if it is not open.\nThis is useful for animating the content in and out using transitions.",
        "defaultValue": "false"
      },
      "typeahead": {
        "type": "boolean",
        "description": "Whether to use typeahead to automatically focus elements.",
        "defaultValue": "true"
      },
      "closeFocus": {
        "type": "FocusProp",
        "description": "Override the default autofocus behavior of the menu\non close."
      },
      "disableFocusFirstItem": {
        "type": "boolean",
        "description": "Optionally prevent focusing the first item in the menu"
      },
      "ids": {
        "type": "IdObj<readonly [\"menu\", \"trigger\"]>",
        "description": "Optionally override the default ids we assign to the elements"
      }
    }
  },
  "listbox": {
    "props": {
      "positioning": {
        "type": "FloatingConfig",
        "description": "Options for positioning the popover menu.",
        "defaultValue": "placement: 'bottom'"
      },
      "arrowSize": {
        "type": "number",
        "description": "The size of the arrow in pixels.",
        "defaultValue": "8"
      },
      "scrollAlignment": {
        "type": "\"nearest\" | \"center\"",
        "description": "Determines behavior when scrolling items into view."
      },
      "loop": {
        "type": "boolean",
        "description": "Whether or not the listbox should loop through the list when\nthe end or beginning is reached.",
        "defaultValue": "true"
      },
      "defaultOpen": {
        "type": "boolean",
        "description": "Whether or not the listbox should be open by default\nwhen the component is rendered.\n\nThis should only be used when you are not passing a controlled `open` store.",
        "defaultValue": "false"
      },
      "open": {
        "type": "Writable<boolean>",
        "description": "An optional controlled store that manages the open state of the listbox."
      },
      "onOpenChange": {
        "type": "ChangeFn<boolean>",
        "description": "Change function that is called when the listbox's `open` state changes."
      },
      "defaultSelected": {
        "type": "S",
        "description": "The default selected option.\n\nThis will be overridden if you also pass a `selected` store prop.",
        "defaultValue": "undefined"
      },
      "selected": {
        "type": "Writable<S>",
        "description": "An optional controlled store that manages the selected option of the listbox."
      },
      "onSelectedChange": {
        "type": "ChangeFn<S>",
        "description": "A change handler for the selected store called when the selected would normally change."
      },
      "closeOnOutsideClick": {
        "type": "boolean",
        "description": "Whether or not to close the listbox menu when the user clicks\noutside of the listbox.",
        "defaultValue": "true"
      },
      "closeOnEscape": {
        "type": "boolean",
        "description": "Whether or not to close the listbox menu when the user presses\nthe escape key.",
        "defaultValue": "true"
      },
      "onOutsideClick": {
        "type": "(event: PointerEvent) => void",
        "description": "A custom event handler for the \"outside click\" event, which\nis handled by the `document`.\nIf `event.preventDefault()` is called within the function,\nthe dialog will not close when the user clicks outside of it."
      },
      "preventScroll": {
        "type": "boolean",
        "description": "Whether or not to prevent scrolling the page when the\nlistbox menu is open.",
        "defaultValue": "true"
      },
      "portal": {
        "type": "string | HTMLElement",
        "description": "If not undefined, the listbox menu will be rendered within the provided element or selector.",
        "defaultValue": "'body'"
      },
      "forceVisible": {
        "type": "boolean",
        "description": "Whether the menu content should be displayed even if it is not open.\nThis is useful for animating the content in and out using transitions.",
        "defaultValue": "false"
      },
      "builder": {
        "type": "string",
        "description": "The name of the builder using listbox.",
        "defaultValue": "'listbox"
      },
      "typeahead": {
        "type": "boolean",
        "description": "Whether or not to enable typeahead.",
        "defaultValue": "true"
      },
      "highlightOnHover": {
        "type": "boolean",
        "description": "IF true, whenever an option is hovered, the highlightedItem will be set to that option.",
        "defaultValue": "true"
      },
      "ids": {
        "type": "IdObj<readonly [\"trigger\", \"menu\", \"label\"]>",
        "description": "Optionally override the default ids we assign to the elements"
      }
    }
  },
  "link-preview": {
    "props": {
      "positioning": {
        "type": "FloatingConfig",
        "description": "Options for positioning the popover menu.",
        "defaultValue": "placement: 'bottom'"
      },
      "defaultOpen": {
        "type": "boolean",
        "description": "Whether or not the linkpreview is open by default.",
        "defaultValue": "false"
      },
      "open": {
        "type": "Writable<boolean>",
        "description": "A controlled open state store for the linkpreview. If provided, the\nvalue of this store will override the `defaultOpen` prop."
      },
      "onOpenChange": {
        "type": "ChangeFn<boolean>",
        "description": "A callback for when the open state changes"
      },
      "openDelay": {
        "type": "number",
        "description": "The delay in milliseconds to hover before opening the linkpreview",
        "defaultValue": "700"
      },
      "closeDelay": {
        "type": "number",
        "description": "The delay in milliseconds after the pointer leaves the\nlinkpreview before closing it.",
        "defaultValue": "300"
      },
      "closeOnOutsideClick": {
        "type": "boolean",
        "description": "Whether or not to close the linkpreview when the pointer is clicked\noutside of it.",
        "defaultValue": "true"
      },
      "onOutsideClick": {
        "type": "(event: PointerEvent) => void",
        "description": "A custom event handler for the \"outside click\" event, which\nis handled by the `document`.\nIf `event.preventDefault()` is called within the function,\nthe dialog will not close when the user clicks outside of it."
      },
      "closeOnEscape": {
        "type": "boolean",
        "description": "Whether or not to close the linkpreview when the escape key is pressed\nwhile it is open.",
        "defaultValue": "true"
      },
      "arrowSize": {
        "type": "number",
        "description": "The size of the optional arrow element in pixels",
        "defaultValue": "8"
      },
      "forceVisible": {
        "type": "boolean",
        "description": "Whether the menu content should be displayed even if it is not open.\nThis is useful for animating the content in and out using transitions.",
        "defaultValue": "false"
      },
      "portal": {
        "type": "string | HTMLElement",
        "description": "If not undefined, the popover will be rendered within the provided element or selector.",
        "defaultValue": "'body'"
      },
      "ids": {
        "type": "IdObj<readonly [\"trigger\", \"content\"]>",
        "description": "Optionally override the default ids we assign to the elements"
      }
    }
  },
  "label": {
    "props": {}
  },
  "hidden-input": {
    "props": {}
  },
  "dropdown-menu": {
    "props": {
      "positioning": {
        "type": "FloatingConfig",
        "description": "Options for positioning the popover menu.",
        "defaultValue": "placement: 'bottom'"
      },
      "arrowSize": {
        "type": "number",
        "description": "The size of the arrow in pixels.",
        "defaultValue": "8"
      },
      "dir": {
        "type": "TextDirection",
        "description": "The direction of the text in the dropdown menu",
        "defaultValue": "'ltr'"
      },
      "preventScroll": {
        "type": "boolean",
        "description": "Whether or not to prevent scrolling when the menu is open.",
        "defaultValue": "true"
      },
      "closeOnEscape": {
        "type": "boolean",
        "description": "Whether or not to close the menu when the escape key is pressed.",
        "defaultValue": "true"
      },
      "closeOnItemClick": {
        "type": "boolean",
        "description": "Whether or not to close the menu when an internal item is clicked.",
        "defaultValue": "true"
      },
      "portal": {
        "type": "string | HTMLElement",
        "description": "If not `undefined`, the menu will be rendered within the provided element or selector.",
        "defaultValue": "'body'"
      },
      "closeOnOutsideClick": {
        "type": "boolean",
        "description": "Whether or not to close the menu when a click occurs outside of it.",
        "defaultValue": "true"
      },
      "onOutsideClick": {
        "type": "(event: PointerEvent) => void",
        "description": "A custom event handler for the \"outside click\" event, which\nis handled by the `document`.\nIf `event.preventDefault()` is called within the function,\nthe dialog will not close when the user clicks outside of it."
      },
      "loop": {
        "type": "boolean",
        "description": "Whether or not to loop the menu navigation.",
        "defaultValue": "false"
      },
      "defaultOpen": {
        "type": "boolean",
        "description": "Whether the menu is open by default or not.\n\nThis option is ignore if you also pass an `open` store prop.",
        "defaultValue": "false"
      },
      "open": {
        "type": "Writable<boolean>",
        "description": "A controlled open state store for the menu. If provided, the\nvalue of this store will override the `defaultOpen` prop."
      },
      "onOpenChange": {
        "type": "ChangeFn<boolean>",
        "description": "A callback for when the open state changes."
      },
      "forceVisible": {
        "type": "boolean",
        "description": "Whether the menu content should be displayed even if it is not open.\nThis is useful for animating the content in and out using transitions.",
        "defaultValue": "false"
      },
      "typeahead": {
        "type": "boolean",
        "description": "Whether to use typeahead to automatically focus elements.",
        "defaultValue": "true"
      },
      "closeFocus": {
        "type": "FocusProp",
        "description": "Override the default autofocus behavior of the menu\non close."
      },
      "disableFocusFirstItem": {
        "type": "boolean",
        "description": "Optionally prevent focusing the first item in the menu"
      },
      "ids": {
        "type": "IdObj<readonly [\"menu\", \"trigger\"]>",
        "description": "Optionally override the default ids we assign to the elements"
      }
    }
  },
  "dialog": {
    "props": {
      "preventScroll": {
        "type": "boolean",
        "description": "If true, the dialog will prevent scrolling on the body\nwhen it is open.",
        "defaultValue": "true"
      },
      "closeOnEscape": {
        "type": "boolean",
        "description": "If true, the dialog will close when the user presses the escape key.",
        "defaultValue": "true"
      },
      "closeOnOutsideClick": {
        "type": "boolean",
        "description": "If true, the dialog will close when the user clicks outside of it.",
        "defaultValue": "true"
      },
      "onOutsideClick": {
        "type": "(event: PointerEvent | MouseEvent | TouchEvent) => void",
        "description": "A custom event handler for the \"outside click\" event, which\nis handled by the `document`.\nIf `event.preventDefault()` is called within the function,\nthe dialog will not close when the user clicks outside of it."
      },
      "role": {
        "type": "\"dialog\" | \"alertdialog\"",
        "description": "The `role` attribute to apply to the dialog.",
        "defaultValue": "'dialog'"
      },
      "defaultOpen": {
        "type": "boolean",
        "description": "If true, the dialog will be open by default.",
        "defaultValue": "false"
      },
      "open": {
        "type": "Writable<boolean>",
        "description": "A writable store that controls the open state of the dialog."
      },
      "onOpenChange": {
        "type": "ChangeFn<boolean>",
        "description": "A function that will be called when the open state of the dialog changes."
      },
      "portal": {
        "type": "string | HTMLElement",
        "description": "If not undefined, the dialog content will be rendered within the provided element or selector.",
        "defaultValue": "'body'"
      },
      "forceVisible": {
        "type": "boolean",
        "description": "If true, the dialog will be visible regardless of the open state.\nUse this when you want to conditionally render the content of the dialog\nusing an `{#if ...}` block.",
        "defaultValue": "false"
      },
      "openFocus": {
        "type": "FocusProp",
        "description": "Override the default autofocus behavior of the dialog\non open."
      },
      "closeFocus": {
        "type": "FocusProp",
        "description": "Override the default autofocus behavior of the dialog\non close."
      },
      "ids": {
        "type": "IdObj<readonly [\"content\", \"title\", \"description\"]>",
        "description": "Optionally override the default ids we assign to the elements"
      }
    }
  },
  "date-range-picker": {
    "props": {
      "defaultValue": {
        "type": "DateRange",
        "description": "The default value for the date field. When provided,\nthe `placeholder` will also assume this value.",
        "defaultValue": "undefined;"
      },
      "onValueChange": {
        "type": "ChangeFn<DateRange>",
        "description": "A function called when the value of the date field changes.\nIt receives a single argument, which is an object containing\n`curr` and `prev` properties, whose values are the current\nand previous values of the value store. Whatever you return\nfrom this function will be set as the new value of the value\nstore.",
        "defaultValue": "undefined"
      },
      "value": {
        "type": "Writable<DateRange>",
        "description": "A writable store than can be used to control the value of the\ndate picker from outside the builder. This is useful if you\nwant to sync the value of the date field with another store\nused in your app.",
        "defaultValue": "undefined;"
      },
      "defaultPlaceholder": {
        "type": "DateValue",
        "description": "The date that is used to display the initial month and\nyear of the calendar. When a `defaultValue` or `value`\nprop containing a date is provided, this prop is ignored.\n\nIt is useful when you want to display a specific month\nand year when the calendar is first opened, but you don't\nnecessarily want to set the value of the date picker to\nthat date.",
        "defaultValue": "CalendarDate - the current date at midnight."
      },
      "placeholder": {
        "type": "DateValue>",
        "description": "A writable store that can be used to control the placeholder\ndate from outside the builder. When this prop is provided,\nthe `defaultPlaceholder` prop is ignored, and the value\nof this store is used instead.\n\nThe `placeholder` store is not used to set the value of the\ndate picker, it is only used to control the starting point for\nthe calendar. The `placeholder` store is used to determine\nwhere the calendar should start when it is first opened without\na value, as well as the starting point for cycling through the\nindividual date segments.\n\nWhen the date picker is first opened, if the `value` of the\ndate picker is set, the `placeholder` will be set\nto the same value as the `value` store. If the `value` store is\nnot set, the `placeholder` will initially be set to the same\nvalue as the `defaultPlaceholder` prop.",
        "defaultValue": "Writable<CalendarDate> - the current date at midnight."
      },
      "onPlaceholderChange": {
        "type": "ChangeFn<DateValue>",
        "description": "A function called when the placeholder value changes. It receives\na single argument, which is an object containing `curr` and\n`prev` properties, whose values are the current and previous\nvalues of the `placeholder` store. Whatever you return from this\nfunction will be set as the new value of the `placeholder` store.\n\nThe `placeholder` is kept in sync with the `value` store, so\nensure you know what you're doing if you intend on overriding the\nvalue, as it may render the date picker unusable.",
        "defaultValue": "undefined"
      },
      "isDateDisabled": {
        "type": "Matcher",
        "description": "Any dates that match the provided matchers will\nbe marked as disabled, which means they cannot be\nfocused or selected. They will also include a data\nattribute that can be used to style them differently\nthan the other dates.",
        "defaultValue": "undefined;"
      },
      "isDateUnavailable": {
        "type": "Matcher",
        "description": "Any dates that match the provided matchers will be\nmarked as unavailable, which is different from disabled,\nas unavailable dates can still be focused and selected,\nbut will cause the date picker to be marked as invalid if\nselected.\n\nFor example, if you are displaying a calendar for booking\nappointments, you may want to mark dates that are already\nbookes as unavailable, but may become available again before\nthe appointment date, so the user can still select them to\nlearn more about the appointment.",
        "defaultValue": "undefined;"
      }
    }
  },
  "date-range-field": {
    "props": {
      "defaultValue": {
        "type": "DateRange",
        "description": "The default value for the date field. When provided,\nthe `placeholder` will also assume this value.",
        "defaultValue": "undefined;"
      },
      "onValueChange": {
        "type": "ChangeFn<DateRange>",
        "description": "A function called when the value of the date field changes.\nIt receives a single argument, which is an object containing\n`curr` and `prev` properties, whose values are the current\nand previous values of the value store. Whatever you return\nfrom this function will be set as the new value of the value\nstore.",
        "defaultValue": "undefined"
      },
      "value": {
        "type": "Writable<DateRange>",
        "description": "A writable store than can be used to control the value of the\ndate picker from outside the builder. This is useful if you\nwant to sync the value of the date field with another store\nused in your app.",
        "defaultValue": "undefined;"
      },
      "defaultPlaceholder": {
        "type": "DateValue",
        "description": "The date that is used when the date field is empty to\ndetermine what point in time the field should start at.",
        "defaultValue": "CalendarDate - the current date at midnight."
      },
      "placeholder": {
        "type": "DateValue>",
        "description": "A writable store that can be used to control the placeholder\ndate from outside the builder. When this prop is provided,\nthe `defaultPlaceholder` prop is ignored, and the value\nof this store is used instead.\n\nThe `placeholder` store is not used to set the value of the\ndate field, it is only used to control the starting point for\nthe field. The `placeholder` store is used as the starting\npoint for cycling through the individual date segments.",
        "defaultValue": "Writable<CalendarDate> - the current date at midnight."
      },
      "onPlaceholderChange": {
        "type": "ChangeFn<DateValue>",
        "description": "A function called when the placeholder value changes. It receives\na single argument, which is an object containing `curr` and\n`prev` properties, whose values are the current and previous\nvalues of the `placeholder` store. Whatever you return from this\nfunction will be set as the new value of the `placeholder` store.\n\nThe `placeholder` is synced with the `value` store, to manage so\ninternal behavior, so ensure you know what you're doing if you intend\non overriding the value, as it may render the component unusable.",
        "defaultValue": "undefined"
      },
      "isDateUnavailable": {
        "type": "Matcher",
        "description": "Any dates that match the provided matchers will be\nmarked as unavailable, where if selected, the date\nfield will be marked as invalid.",
        "defaultValue": "undefined;"
      },
      "startName": {
        "type": "string",
        "description": "The value to be used as the `name` attribute for the\n`startHiddenInput` element."
      },
      "endName": {
        "type": "string",
        "description": "The value to be used as the `name` attribute for the\n`endHiddenInput` element."
      },
      "readonlySegments": {
        "type": "{ start: EditableSegmentPart[]; end: EditableSegmentPart[]; }",
        "description": "\nLists of segment names that will be readonly on the start and end fields.",
        "defaultValue": "undefined"
      },
      "ids": {
        "type": "IdObj<readonly [\"field\", \"label\", \"description\", \"validation\"]>",
        "description": "Override any of the element IDs set by the builder.\n\nNOTE: you should only use this prop if you know what\nyou're doing, as it could break the out-of-the-box\naccessibility and functionality of the date field if\nimplemented incorrectly."
      }
    }
  },
  "date-picker": {
    "props": {
      "defaultValue": {
        "type": "DateValue",
        "description": "The default value for the date picker. When provided,\nthe `activeDate` will assume this value so the calendar\nwill open to the month/year of this value.",
        "defaultValue": "undefined;"
      },
      "onValueChange": {
        "type": "ChangeFn<DateValue>",
        "description": "A function called when the value of the date picker changes.\nIt receives a single argument, which is an object containing\n`curr` and `prev` properties, whose values are the current\nand previous values of the value store. Whatever you return\nfrom this function will be set as the new value of the value\nstore.",
        "defaultValue": "undefined"
      },
      "value": {
        "type": "DateValue>",
        "description": "A writable store than can be used to control the value of the\ndate picker from outside the builder. This is useful if you\nwant to sync the value of the date picker with another store\nused in your app.",
        "defaultValue": "undefined;"
      },
      "defaultPlaceholder": {
        "type": "DateValue",
        "description": "The date that is used to display the initial month and\nyear of the calendar. When a `defaultValue` or `value`\nprop containing a date is provided, this prop is ignored.\n\nIt is useful when you want to display a specific month\nand year when the calendar is first opened, but you don't\nnecessarily want to set the value of the date picker to\nthat date.",
        "defaultValue": "CalendarDate - the current date at midnight."
      },
      "placeholder": {
        "type": "DateValue>",
        "description": "A writable store that can be used to control the placeholder\ndate from outside the builder. When this prop is provided,\nthe `defaultPlaceholder` prop is ignored, and the value\nof this store is used instead.\n\nThe `placeholder` store is not used to set the value of the\ndate picker, it is only used to control the starting point for\nthe calendar. The `placeholder` store is used to determine\nwhere the calendar should start when it is first opened without\na value, as well as the starting point for cycling through the\nindividual date segments.\n\nWhen the date picker is first opened, if the `value` of the\ndate picker is set, the `placeholder` will be set\nto the same value as the `value` store. If the `value` store is\nnot set, the `placeholder` will initially be set to the same\nvalue as the `defaultPlaceholder` prop.",
        "defaultValue": "Writable<CalendarDate> - the current date at midnight."
      },
      "onPlaceholderChange": {
        "type": "ChangeFn<DateValue>",
        "description": "A function called when the placeholder value changes. It receives\na single argument, which is an object containing `curr` and\n`prev` properties, whose values are the current and previous\nvalues of the `placeholder` store. Whatever you return from this\nfunction will be set as the new value of the `placeholder` store.\n\nThe `placeholder` is kept in sync with the `value` store, so\nensure you know what you're doing if you intend on overriding the\nvalue, as it may render the date picker unusable.",
        "defaultValue": "undefined"
      },
      "isDateDisabled": {
        "type": "Matcher",
        "description": "Any dates that match the provided matchers will\nbe marked as disabled, which means they cannot be\nfocused or selected. They will also include a data\nattribute that can be used to style them differently\nthan the other dates.",
        "defaultValue": "undefined;"
      },
      "isDateUnavailable": {
        "type": "Matcher",
        "description": "Any dates that match the provided matchers will be\nmarked as unavailable, which is different from disabled,\nas unavailable dates can still be focused and selected,\nbut will cause the date picker to be marked as invalid if\nselected.\n\nFor example, if you are displaying a calendar for booking\nappointments, you may want to mark dates that are already\nbookes as unavailable, but may become available again before\nthe appointment date, so the user can still select them to\nlearn more about the appointment.",
        "defaultValue": "undefined;"
      }
    }
  },
  "date-field": {
    "props": {
      "defaultValue": {
        "type": "DateValue",
        "description": "The default value for the date field. When provided,\nthe `placeholder` will also assume this value.",
        "defaultValue": "undefined;"
      },
      "onValueChange": {
        "type": "ChangeFn<DateValue>",
        "description": "A function called when the value of the date field changes.\nIt receives a single argument, which is an object containing\n`curr` and `prev` properties, whose values are the current\nand previous values of the value store. Whatever you return\nfrom this function will be set as the new value of the value\nstore.",
        "defaultValue": "undefined"
      },
      "value": {
        "type": "DateValue>",
        "description": "A writable store than can be used to control the value of the\ndate picker from outside the builder. This is useful if you\nwant to sync the value of the date field with another store\nused in your app.",
        "defaultValue": "undefined;"
      },
      "defaultPlaceholder": {
        "type": "DateValue",
        "description": "The date that is used when the date field is empty to\ndetermine what point in time the field should start at.",
        "defaultValue": "CalendarDate - the current date at midnight."
      },
      "placeholder": {
        "type": "DateValue>",
        "description": "A writable store that can be used to control the placeholder\ndate from outside the builder. When this prop is provided,\nthe `defaultPlaceholder` prop is ignored, and the value\nof this store is used instead.\n\nThe `placeholder` store is not used to set the value of the\ndate field, it is only used to control the starting point for\nthe field. The `placeholder` store is used as the starting\npoint for cycling through the individual date segments."
      },
      "onPlaceholderChange": {
        "type": "ChangeFn<DateValue>",
        "description": "A function called when the placeholder value changes. It receives\na single argument, which is an object containing `curr` and\n`prev` properties, whose values are the current and previous\nvalues of the `placeholder` store. Whatever you return from this\nfunction will be set as the new value of the `placeholder` store.\n\nThe `placeholder` is kept in sync with the `value` store, so\nensure you know what you're doing if you intend on overriding the\nvalue, as it may render the date field unusable.",
        "defaultValue": "undefined"
      },
      "isDateUnavailable": {
        "type": "Matcher",
        "description": "Any dates that match the provided matchers will be\nmarked as unavailable, where if selected, the date\nfield will be marked as invalid.",
        "defaultValue": "undefined;"
      },
      "minValue": {
        "type": "DateValue",
        "description": "The minimum acceptable date. When provided, the\ndate field will become invalid if the user enters\na date before this date.",
        "defaultValue": "undefined"
      },
      "maxValue": {
        "type": "DateValue",
        "description": "The maximum acceptable date. When provided, the\ndate field will become invalid if the user enters\na date after this date.",
        "defaultValue": "undefined"
      },
      "disabled": {
        "type": "boolean",
        "description": "If true, the date field will be disabled and users\nwill not be able to interact with it. This also disables\nthe hidden input element.",
        "defaultValue": "false"
      },
      "readonly": {
        "type": "boolean",
        "description": "If true, the date field will be readonly, and users\nwill not be able to edit the values of any of the\nindividual segments.",
        "defaultValue": "false"
      },
      "readonlySegments": {
        "type": "EditableSegmentPart[]",
        "description": "\nList of segment names that will be readonly.",
        "defaultValue": "undefined"
      },
      "hourCycle": {
        "type": "12 | 24",
        "description": "The format to use for displaying the time in the input.\nIf using a 12 hour clock, ensure you also include the\n`dayPeriod` segment in your input to ensure the user\ncan select AM/PM.\n\nDefaults to the locale's default time format."
      },
      "locale": {
        "type": "string",
        "description": "The locale to use for formatting the date field.",
        "defaultValue": "'en'"
      },
      "granularity": {
        "type": "Granularity",
        "description": "The granularity of the date field. This determines which\nsegments will be includes in the segments array used to\nbuild the date field.\n\nBy default, when a `CalendarDate` value is used, the granularity\nwill default to `'day'`, and when a `CalendarDateTime` or `ZonedDateTime`\nvalue is used, the granularity will default to `'minute'`.\n\nGranularity is only used for visual purposes, and does not impact\nthe value of the date field. You can have the same value synced\nbetween multiple date fields with different granularities and they\nwill all contain the same value.",
        "defaultValue": "'day'"
      },
      "hideTimeZone": {
        "type": "boolean",
        "description": "Whether or not to hide the timeZoneName segment from the date field.",
        "defaultValue": "false;"
      },
      "name": {
        "type": "string",
        "description": "The name to use for the hidden input element of the date field,\nwhich is used to submit the ISO string value of the date field\nto a server.",
        "defaultValue": "undefined;"
      },
      "required": {
        "type": "boolean",
        "description": "\nWhether or not the hidden input element of the date field requires\na value to be submitted.",
        "defaultValue": "false"
      },
      "ids": {
        "type": "IdObj<readonly [\"field\", \"label\", \"description\", \"validation\", \"day\", \"month\", \"year\", \"hour\", \"minute\", \"second\", \"dayPeriod\", \"timeZoneName\"]>",
        "description": "Override any of the element IDs set by the builder.\n\nNOTE: you should only use this prop if you know what\nyou're doing, as it could break the out-of-the-box\naccessibility and functionality of the date field if\nimplemented incorrectly."
      }
    }
  },
  "context-menu": {
    "props": {
      "positioning": {
        "type": "FloatingConfig",
        "description": "Options for positioning the popover menu.",
        "defaultValue": "placement: 'bottom'"
      },
      "arrowSize": {
        "type": "number",
        "description": "The size of the arrow in pixels.",
        "defaultValue": "8"
      },
      "dir": {
        "type": "TextDirection",
        "description": "The direction of the text in the dropdown menu",
        "defaultValue": "'ltr'"
      },
      "preventScroll": {
        "type": "boolean",
        "description": "Whether or not to prevent scrolling when the menu is open.",
        "defaultValue": "true"
      },
      "closeOnEscape": {
        "type": "boolean",
        "description": "Whether or not to close the menu when the escape key is pressed.",
        "defaultValue": "true"
      },
      "closeOnItemClick": {
        "type": "boolean",
        "description": "Whether or not to close the menu when an internal item is clicked.",
        "defaultValue": "true"
      },
      "portal": {
        "type": "string | HTMLElement",
        "description": "If not `undefined`, the menu will be rendered within the provided element or selector.",
        "defaultValue": "'body'"
      },
      "closeOnOutsideClick": {
        "type": "boolean",
        "description": "Whether or not to close the menu when a click occurs outside of it.",
        "defaultValue": "true"
      },
      "onOutsideClick": {
        "type": "(event: PointerEvent) => void",
        "description": "A custom event handler for the \"outside click\" event, which\nis handled by the `document`.\nIf `event.preventDefault()` is called within the function,\nthe dialog will not close when the user clicks outside of it."
      },
      "loop": {
        "type": "boolean",
        "description": "Whether or not to loop the menu navigation.",
        "defaultValue": "false"
      },
      "defaultOpen": {
        "type": "boolean",
        "description": "Whether the menu is open by default or not.\n\nThis option is ignore if you also pass an `open` store prop.",
        "defaultValue": "false"
      },
      "open": {
        "type": "Writable<boolean>",
        "description": "A controlled open state store for the menu. If provided, the\nvalue of this store will override the `defaultOpen` prop."
      },
      "onOpenChange": {
        "type": "ChangeFn<boolean>",
        "description": "A callback for when the open state changes."
      },
      "forceVisible": {
        "type": "boolean",
        "description": "Whether the menu content should be displayed even if it is not open.\nThis is useful for animating the content in and out using transitions.",
        "defaultValue": "false"
      },
      "typeahead": {
        "type": "boolean",
        "description": "Whether to use typeahead to automatically focus elements.",
        "defaultValue": "true"
      },
      "closeFocus": {
        "type": "FocusProp",
        "description": "Override the default autofocus behavior of the menu\non close."
      },
      "disableFocusFirstItem": {
        "type": "boolean",
        "description": "Optionally prevent focusing the first item in the menu"
      },
      "ids": {
        "type": "IdObj<readonly [\"menu\", \"trigger\"]>",
        "description": "Optionally override the default ids we assign to the elements"
      }
    }
  },
  "combobox": {
    "props": {}
  },
  "collapsible": {
    "props": {
      "disabled": {
        "type": "boolean",
        "description": "Whether the collapsible is disabled which prevents it from being opened."
      },
      "forceVisible": {
        "type": "boolean",
        "description": "Whether the collapsible content should be displayed even if it is not open.\nThis is useful for animating the collapsible content in and out using transitions.",
        "defaultValue": "false"
      },
      "defaultOpen": {
        "type": "boolean",
        "description": "Whether the collapsible is open by default.",
        "defaultValue": "false"
      },
      "open": {
        "type": "Writable<boolean>",
        "description": "Optionally pass a writable store to control the open state of the collapsible.\nIf provided, this will override the value of the `defaultOpen` prop."
      },
      "onOpenChange": {
        "type": "ChangeFn<boolean>",
        "description": "A callback called when the value of the `open` store should be changed."
      }
    }
  },
  "checkbox": {
    "props": {
      "disabled": {
        "type": "boolean",
        "description": "When `true`, the checkbox will be disabled.",
        "defaultValue": "false"
      },
      "required": {
        "type": "boolean",
        "description": "When `true`, indicates that the user must check the checkbox before the owning form can be submitted.",
        "defaultValue": "false;"
      },
      "name": {
        "type": "string",
        "description": "The name of the checkbox. Submitted with its owning form as part of a name/value pair.",
        "defaultValue": "undefined"
      },
      "value": {
        "type": "string",
        "description": "The value given as data when submitted with a `name`.",
        "defaultValue": "'on'"
      },
      "defaultChecked": {
        "type": "boolean | \"indeterminate\"",
        "description": "The uncontrolled default checked status of the checkbox.",
        "defaultValue": "false"
      },
      "checked": {
        "type": "Writable<boolean | \"indeterminate\">",
        "description": "The controlled checked state store of the checkbox.\nIf provided, this will override the value passed to `defaultChecked`."
      },
      "onCheckedChange": {
        "type": "ChangeFn<boolean | \"indeterminate\">",
        "description": "The callback invoked when the checked state store of the checkbox changes."
      }
    }
  },
  "calendar": {
    "props": {
      "preventDeselect": {
        "type": "boolean",
        "description": "Prevent deselecting the selected date(s), which would set the\nvalue to `undefined`. You can use this to ensure a date\nis always selected in certain situations.",
        "defaultValue": "false"
      },
      "minValue": {
        "type": "DateValue",
        "description": "The minimum selectable date. When provided, the\ncalendar will not shift to a month before this date,\nand all dates before this date will be disabled.",
        "defaultValue": "undefined"
      },
      "maxValue": {
        "type": "DateValue",
        "description": "The maximum selectable date. When provided, the\ncalendar will not shift to a month after this date,\nand all dates before this date will be disabled.",
        "defaultValue": "undefined"
      },
      "defaultValue": {
        "type": "S",
        "description": "The default value for the date picker. When provided,\nthe `placeholder` will assume this value so the calendar\nwill open to the month/year of this value.",
        "defaultValue": "undefined;"
      },
      "onValueChange": {
        "type": "ChangeFn<S>",
        "description": "A function called when the value of the date picker changes.\nIt receives a single argument, which is an object containing\n`curr` and `prev` properties, whose values are the current\nand previous values of the value store. Whatever you return\nfrom this function will be set as the new value of the value\nstore.",
        "defaultValue": "undefined"
      },
      "value": {
        "type": "Writable<S>",
        "description": "A writable store than can be used to control the value of the\ndate picker from outside the builder. This is useful if you\nwant to sync the value of the date picker with another store\nused in your app.",
        "defaultValue": "undefined;"
      },
      "defaultPlaceholder": {
        "type": "DateValue",
        "description": "The date that is used to display the initial month and\nyear of the calendar. When a `defaultValue` or `value`\nprop containing a date is provided, this prop is ignored.\n\nIt is useful when you want to display a specific month\nand year when the calendar is first opened, but you don't\nnecessarily want to set the value of the date picker to\nthat date.",
        "defaultValue": "CalendarDate - the current date at midnight."
      },
      "placeholder": {
        "type": "DateValue>",
        "description": "A writable store that can be used to externally control the placeholder date.\nWhen provided, it overrides the `defaultPlaceholder` prop.\n\nThe `placeholder` store determines the initial display when the calendar is\nfirst opened without a value, and it serves as the starting point for cycling through\nindividual date segments.\n\nWhen the date picker is first opened, if the `value` of the date picker is set,\nthe `placeholder` will be set to the same value as the `value` store. If the\n`value` store is not set, the `placeholder` will initially match the\n`defaultPlaceholder` prop.",
        "defaultValue": "Writable<CalendarDate> - set to the current date at midnight."
      },
      "onPlaceholderChange": {
        "type": "ChangeFn<DateValue>",
        "description": "A function called when the placeholder value changes. It takes a single argument,\nan object with `curr` and `prev` properties representing the current and previous\nvalues of the `placeholder` store. Any value you return from this function\nwill replace the current value of the `placeholder` store.\n\nIt's important to note that the `placeholder` is synchronized with the `value`\nstore. Therefore, caution is required when overriding this value, as it may impact\nthe functionality of the date picker.",
        "defaultValue": "undefined"
      },
      "pagedNavigation": {
        "type": "boolean",
        "description": "Applicable only when `numberOfMonths` is greater than 1.\n\nControls whether to use paged navigation for the next and previous buttons in the\ndate picker. With paged navigation set to `true`, clicking the next/prev buttons\nchanges all months in view. When set to `false`, it shifts the view by a single month.\n\nFor example, with `pagedNavigation` set to `true` and 2 months displayed (January and\nFebruary), clicking the next button changes the view to March and April. If `pagedNavigation`\nis `false`, the view shifts to February and March.",
        "defaultValue": "false"
      },
      "weekStartsOn": {
        "type": "0 | 1 | 2 | 3 | 4 | 5 | 6",
        "description": "The day of the week to start the calendar on, which must\nbe a number between 0 and 6, where 0 is Sunday and 6 is\nSaturday."
      },
      "weekdayFormat": {
        "type": "\"long\" | \"short\" | \"narrow\"",
        "description": "How the string representation of the weekdays provided via the `weekdays` state store\nshould be formatted.\n\n```md\n- \"long\": \"Sunday\", \"Monday\", \"Tuesday\", etc.\n- \"short\": \"Sun\", \"Mon\", \"Tue\", etc.\n- \"narrow\": \"S\", \"M\", \"T\", etc.\n```",
        "defaultValue": "\"narrow\""
      },
      "isDateDisabled": {
        "type": "Matcher",
        "description": "A function that receives a date and returns `true` or `false` to indicate whether\nthe date is disabled.",
        "defaultValue": "undefined;"
      },
      "isDateUnavailable": {
        "type": "Matcher",
        "description": "Dates matching the provided matchers are marked as \"unavailable.\" Unlike disabled dates,\nusers can still focus and select unavailable dates. However, selecting an unavailable date\nrenders the date picker as invalid.\n\nFor example, in a calendar for booking appointments, you might mark already booked dates as\nunavailable. These dates could become available again before the appointment date, allowing\nusers to select them to learn more about the appointment.\n\n`[data-unavailable]` - applied to unavailable dates",
        "defaultValue": "undefined;"
      },
      "fixedWeeks": {
        "type": "boolean",
        "description": "Display 6 weeks per month, regardless the month's number of weeks.\nThis is useful for displaying a consistent calendar, where the size\nof the calendar doesn't change month to month.\n\nTo display 6 weeks per month, you will need to render out the previous\nand next month's dates in the calendar as well.",
        "defaultValue": "false"
      },
      "numberOfMonths": {
        "type": "number",
        "description": "Determines the number of months to display on the calendar simultaneously.\nFor navigation between months, refer to the `pagedNavigation` prop.",
        "defaultValue": "1"
      },
      "calendarLabel": {
        "type": "string",
        "description": "This label is exclusively used for accessibility, remaining hidden from the page.\nIt's read by screen readers when the calendar is opened. The current month and year\nare automatically appended to the label, so you only need to provide the base label.\n\nFor instance:\n- 'Date of birth' will be read as 'Date of birth, January 2021' if the current month is January 2021.\n- 'Appointment date' will be read as 'Appointment date, January 2021' if the current month is January 2021.\n- 'Booking date' will be read as 'Booking date, January 2021' if the current month is January 2021."
      },
      "locale": {
        "type": "string",
        "description": "The default locale setting.",
        "defaultValue": "'en'"
      },
      "multiple": {
        "type": "Multiple",
        "description": "The default locale setting.",
        "defaultValue": "'en'"
      },
      "disabled": {
        "type": "boolean",
        "description": "Whether the calendar is disabled. When true, the user will not\nbe able to focus or select dates.",
        "defaultValue": "false"
      },
      "readonly": {
        "type": "boolean",
        "description": "Whether the calendar is readonly. When true, the user will be able\nto focus and navigate the calendar, but will not be able to select\ndates.",
        "defaultValue": "false"
      },
      "ids": {
        "type": "IdObj<readonly [\"calendar\", \"accessibleHeading\"]>",
        "description": "Optionally override the default ids we assign to the elements"
      }
    }
  },
  "avatar": {
    "props": {
      "src": {
        "type": "string",
        "description": "The source of the image to display."
      },
      "delayMs": {
        "type": "number",
        "description": "The amount of time in milliseconds to wait before displaying the image.",
        "defaultValue": "0"
      },
      "loadingStatus": {
        "type": "Writable<\"loading\" | \"loaded\" | \"error\">",
        "description": "The controlled loading status store for the avatar."
      },
      "onLoadingStatusChange": {
        "type": "ChangeFn<\"loading\" | \"loaded\" | \"error\">",
        "description": "A callback invoked when the loading status store of the avatar changes."
      }
    }
  },
  "accordion": {
    "props": {
      "multiple": {
        "type": "Multiple",
        "description": "If `true`, multiple accordion items can be open at the same time.",
        "defaultValue": "false"
      },
      "disabled": {
        "type": "boolean",
        "description": "When `true`, prevents the user from interacting with the accordion.",
        "defaultValue": "false"
      },
      "forceVisible": {
        "type": "boolean",
        "description": "Whether the accordion content should be displayed even if it is not open.\nThis is useful for animating the content in and out using transitions.",
        "defaultValue": "false"
      },
      "defaultValue": {
        "type": "WhenTrue<Multiple, string[], string>",
        "description": "The uncontrolled default value of the accordion."
      },
      "value": {
        "type": "Writable<any>",
        "description": "The controlled value store for the accordion.\nIf provided, this will override the value passed to `defaultValue`."
      },
      "onValueChange": {
        "type": "ChangeFn<any>",
        "description": "A callback called when the value of the `value` store should be changed."
      }
    }
  }
}